import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { FormBuilder, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { parseGermanAddress } from '../../helpers/parser';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import { InputAnimations } from '../../animations';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class MatSearchGoogleMapsAutocompleteComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.appearance = Appearance.STANDARD;
        this.searchAddressLabel = 'Search Address';
        this.streetNameLabel = 'Street';
        this.streetNumberLabel = 'Nr.';
        this.postalCodeLabel = 'PLZ';
        this.localityLabel = 'Locality';
        this.vicinityLabel = 'Vicinity';
        this.onGermanAddressMapped = new EventEmitter();
        this.firstInit = true;
        this.propagateChange = (_) => {
        };
        // Set the private defaults
        this._unsubscribeAll = new Subject();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.propagateChange(this.value);
        console.log('setValue', this._value);
    }
    ngOnInit() {
        this.createAddressFormGroup();
        this.enableCustomInput();
    }
    createAddressFormGroup() {
        this.addressFormGroup = this.formBuilder.group({
            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],
            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],
            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],
            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],
            locality: this.formBuilder.group({
                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],
            }),
        });
    }
    enableCustomInput() {
        this.addressFormGroup
            .get('streetName')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(streetName => {
            console.log('custom input for street Name', streetName);
            console.log('custom input - new german address streetName', this.value);
            !this.value ? this.value = { streetName } : this.value.streetName = streetName;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('streetNumber')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(streetNumber => {
            !this.value ? this.value = { streetNumber } : this.value.streetNumber = streetNumber;
            console.log('custom input - new german address streetNumber', this.value);
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('postalCode')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(postalCode => {
            !this.value ? this.value = { postalCode } : this.value.postalCode = postalCode;
            console.log('custom input - new german address postalCode', this.value);
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('vicinity')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(vicinity => {
            !this.value ? this.value = { vicinity } : this.value.vicinity = vicinity;
            console.log('custom input - new german address vicinity', this.value);
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('locality')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(locality => {
            !this.value ? this.value = { locality } : this.value.locality = locality;
            console.log('custom input - new german address locality', this.value);
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
    }
    parseDisplayAddress() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        return `${((_a = this.value) === null || _a === void 0 ? void 0 : _a.streetName) ? (_b = this.value) === null || _b === void 0 ? void 0 : _b.streetName : ''} ${((_c = this.value) === null || _c === void 0 ? void 0 : _c.streetNumber) ? (_d = this.value) === null || _d === void 0 ? void 0 : _d.streetNumber : ''}${((_e = this.value) === null || _e === void 0 ? void 0 : _e.postalCode) || ((_g = (_f = this.value) === null || _f === void 0 ? void 0 : _f.locality) === null || _g === void 0 ? void 0 : _g.long) ? ', ' : ''}${((_h = this.value) === null || _h === void 0 ? void 0 : _h.postalCode) ? (_j = this.value) === null || _j === void 0 ? void 0 : _j.postalCode : ''} ${((_l = (_k = this.value) === null || _k === void 0 ? void 0 : _k.locality) === null || _l === void 0 ? void 0 : _l.long) ? (_o = (_m = this.value) === null || _m === void 0 ? void 0 : _m.locality) === null || _o === void 0 ? void 0 : _o.long : ''}`;
    }
    syncAutoComplete($event) {
        if (this.germanAddress) {
            this.addressFormGroup.reset();
        }
        const germanAddress = parseGermanAddress($event);
        this.germanAddress = germanAddress;
        if (germanAddress.vicinity) {
            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.streetName) {
            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.streetNumber) {
            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.postalCode) {
            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.locality && germanAddress.locality.long) {
            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, { emitEvent: false, onlySelf: true });
        }
        this.value = germanAddress;
        this.onGermanAddressMapped.emit(germanAddress);
    }
    writeValue(obj) {
        let shouldRecreateFG = false;
        if (obj) {
            if (!this.value && this.firstInit) {
                shouldRecreateFG = true;
            }
            this.value = obj;
            if (shouldRecreateFG) {
                this.createAddressFormGroup();
                this.firstInit = false;
            }
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
    }
    setDisabledState(isDisabled) {
    }
}
MatSearchGoogleMapsAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-google-maps-autocomplete',
                template: "<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"searchBarAppearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          type=\"number\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n",
                animations: InputAnimations,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),
                        multi: true
                    }
                ],
                styles: [""]
            },] }
];
MatSearchGoogleMapsAutocompleteComponent.ctorParameters = () => [
    { type: FormBuilder }
];
MatSearchGoogleMapsAutocompleteComponent.propDecorators = {
    searchBarAppearance: [{ type: Input }],
    appearance: [{ type: Input }],
    searchAddressLabel: [{ type: Input }],
    streetNameLabel: [{ type: Input }],
    streetNumberLabel: [{ type: Input }],
    postalCodeLabel: [{ type: Input }],
    localityLabel: [{ type: Input }],
    vicinityLabel: [{ type: Input }],
    showVicinity: [{ type: Input }],
    country: [{ type: Input }],
    placeIdOnly: [{ type: Input }],
    strictBounds: [{ type: Input }],
    types: [{ type: Input }],
    type: [{ type: Input }],
    readonly: [{ type: Input }],
    disableSearch: [{ type: Input }],
    _value: [{ type: Input }],
    onGermanAddressMapped: [{ type: Output }],
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,