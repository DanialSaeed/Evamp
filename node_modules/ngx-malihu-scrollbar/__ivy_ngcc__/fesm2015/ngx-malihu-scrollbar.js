import { Injectable, NgZone, Directive, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class MalihuScrollbarService {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
    }
    /**
     * @param {?} element
     * @param {?} options
     * @return {?}
     */
    initScrollbar(element, options) {
        /** @type {?} */
        const jQueryElement = this.getElement(element);
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => jQueryElement.mCustomScrollbar(options)));
        if (jQueryElement.length > 0 && jQueryElement[0].tagName === 'BODY') {
            jQueryElement[0].style.position = 'absolute';
            jQueryElement[0].style.overflow = 'auto';
            jQueryElement[0].style.height = '100vh';
            jQueryElement[0].style.width = '100vw';
        }
    }
    /**
     * @param {?} element
     * @param {?} parameter
     * @param {?} options
     * @return {?}
     */
    scrollTo(element, parameter, options) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.getElement(element).mCustomScrollbar('scrollTo', parameter, options)));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    update(element) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.getElement(element).mCustomScrollbar('update')));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    stop(element) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.getElement(element).mCustomScrollbar('stop')));
    }
    /**
     * @param {?} element
     * @param {?=} reset
     * @return {?}
     */
    disable(element, reset) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.getElement(element).mCustomScrollbar('disable', !!reset)));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    destroy(element) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => this.getElement(element).mCustomScrollbar('destroy')));
    }
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    getElement(element) {
        if (typeof element === 'string') {
            return $(element);
        }
        if (typeof element === 'object' && element instanceof HTMLElement) {
            return $(element);
        }
        if (element instanceof jQuery || 'jquery' in Object(element)) {
            return element;
        }
        throw Error(`Unsupported element type in MalihuScrollbarService: ${element}`);
    }
}
MalihuScrollbarService.ɵfac = function MalihuScrollbarService_Factory(t) { return new (t || MalihuScrollbarService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
MalihuScrollbarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MalihuScrollbarService, factory: MalihuScrollbarService.ɵfac });
/** @nocollapse */
MalihuScrollbarService.ctorParameters = () => [
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
class MalihuScrollbarDirective {
    /**
     * @param {?} elementRef
     * @param {?} mScrollbarService
     */
    constructor(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initElements();
        this.initScrollbar();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyScrollbar();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.scrollableElement = !!this.scrollElementId
            ? $(`#${this.scrollElementId}`)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error(`MalihuScrollbarDirective cannot find element with provided scrollElementId: ${this.scrollElementId}.`);
        }
    }
    /**
     * @return {?}
     */
    initScrollbar() {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    }
    /**
     * @return {?}
     */
    destroyScrollbar() {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    }
}
MalihuScrollbarDirective.ɵfac = function MalihuScrollbarDirective_Factory(t) { return new (t || MalihuScrollbarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MalihuScrollbarService)); };
MalihuScrollbarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MalihuScrollbarDirective, selectors: [["", "MalihuScrollbar", ""], ["", "malihu-scrollbar", ""]], inputs: { scrollElementId: "scrollElementId", scrollbarOptions: "scrollbarOptions" } });
/** @nocollapse */
MalihuScrollbarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MalihuScrollbarService }
];
MalihuScrollbarDirective.propDecorators = {
    scrollElementId: [{ type: Input }],
    scrollbarOptions: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarDirective, [{
        type: Directive,
        args: [{
                selector: '[MalihuScrollbar], [malihu-scrollbar]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MalihuScrollbarService }]; }, { scrollElementId: [{
            type: Input
        }], scrollbarOptions: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MalihuScrollbarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MalihuScrollbarModule,
            providers: [MalihuScrollbarService],
        };
    }
    /**
     * @return {?}
     */
    static forChild() {
        return {
            ngModule: MalihuScrollbarModule,
        };
    }
}
MalihuScrollbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MalihuScrollbarModule });
MalihuScrollbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MalihuScrollbarModule_Factory(t) { return new (t || MalihuScrollbarModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MalihuScrollbarModule, { declarations: [MalihuScrollbarDirective], exports: [MalihuScrollbarDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarModule, [{
        type: NgModule,
        args: [{
                exports: [MalihuScrollbarDirective],
                declarations: [MalihuScrollbarDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MalihuScrollbarDirective, MalihuScrollbarModule, MalihuScrollbarService };

//# sourceMappingURL=ngx-malihu-scrollbar.js.map